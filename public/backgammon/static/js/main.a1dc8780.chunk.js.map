{"version":3,"sources":["components/Quarter/Quarter.module.css","components/Field/Field.module.css","components/Edge/Edge.module.css","components/Dice/Dice.module.css","components/Chip/Chip.tsx","app/hooks.ts","slicer/boardHelper.ts","slicer/roundSlice.ts","slicer/diceHelper.ts","slicer/moveChipsHelper.ts","slicer/boardSlice.ts","components/Field/Field.tsx","components/Edge/Edge.tsx","components/Quarter/Quarter.tsx","components/Board/Board.tsx","img/dado-1.svg","img/dado-2.svg","img/dado-3.svg","img/dado-4.svg","img/dado-5.svg","img/dado-6.svg","components/Dice/Dice.tsx","components/rolled-dice/RolledDice.tsx","helpers/styleHelper.ts","components/swap-player-popper/SwapPlayerPopper.tsx","components/name-input/NameInput.tsx","components/current-player/CurrentPlayer.tsx","components/points-counter/PointsCounter.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["module","exports","Chip","props","skew","position","Math","floor","className","style","top","useAppDispatch","useDispatch","useAppSelector","useSelector","emptyBoard","Array","map","_","chips","pos","amount","startBoard","field","i","newField","forEach","a","rollDiceAndCheckForKickedStones","createAsyncThunk","diceRoll","getState","dispatch","setDiceRoll","kickedChips","activePlayer","round","selectUnselect","setPossibleMoves","getPossibleMoves","finishRound","winner","addPoints","endGame","updateBoard","swapPlayers","board","reduce","b","enemyPlayer","Promise","r","setTimeout","roundSlice","createSlice","name","initialState","newRound","showPopper","playerNames","gameStarted","gameEnd","points","reducers","state","payload","beginRound","hidePopper","savePlayerName","player","startGame","extraReducers","builder","addCase","pending","fulfilled","actions","selectActivePlayer","selectDiceRoll","selectNewRound","selectShowPopper","selectPlayerNames","selectGameStarted","selectGameEnded","selectPoints","rollDie","random","rollDice","roll","determineStartingPlayer","dice","length","jumpout","fieldId","oneDieExact","stepsTaken","indexOf","allChipsInHomeQuarter","notHome","slice","fieldIsFree","isOnBoard","getBaseMoves","selectedChip","moves","undefined","die","target","push","distanceToExit","highestDieNeeded","addJumpoutToPossibleMoves","getNextMoves","usedDie","index","nextStep","usedDiceCombined","kickedOut","hasChipsKickedOut","noMovesPossible","every","possibleMoves","removeChipFromField","fieldIndex","currentBoard","returnOnBoard","moveStone","addChipToField","needToKickEnemy","kickStone","kickEnemyStone","moveAndUpdateDice","abs","splice","removeOneDie","filter","sort","removeWhenJumpingOut","counter","removeWhenUsingMultipleDice","removeDiceUsed","endRound","unselectChip","handleClickOnField","kicked","selectKickedOutStone","playerHasChipsOnField","move","stoneIsBlocked","boardSlice","selectStone","unSelectStone","selectBoard","selectPossibleMoves","selectKickedChips","Field","selected","possibleTarget","getClassName","join","chipStack","styles","onClick","Edge","classNames","chip","Quarter","id","quarter","bottomColor","fields","Board","bottom","margin","paddingBottom","Dice","topSide","one","two","three","four","five","six","num","src","alt","width","RolledDice","e","stopPropagation","center","left","transform","zIndex","popperHidden","backgroundColor","borderRadius","padding","boxShadow","opacity","transition","popperShown","SwapPlayerPopper","message","textAlign","NameInput","useState","setPlayer","setName","fontSize","type","value","onChange","marginBottom","marginLeft","CurrentPlayer","display","paddingRight","PointsCounter","App","useEffect","justifyContent","href","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","boardReducer","roundReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,QAAU,2B,mBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,qB,mLCqBVC,EAdsD,SACjEC,GAEA,IAAMC,EAAQD,EAAME,SAAW,EAAK,GAAsC,GAAjCC,KAAKC,MAAMJ,EAAME,SAAW,GACrE,OACI,wBACIG,UAAWL,EAAMK,UACjBC,MAAON,EAAMO,IAAM,CAACA,IAAKN,GAAS,CAACM,IAAK,IAAMN,GAE9C,cAAY,U,OCdXO,EAAiB,kBAAMC,eACvBC,EAAkDC,I,OCUzDC,EAAyB,YAAIC,MAAM,KAAKC,KAAI,SAACC,GAAD,MAAO,CAAC,EAAG,MAEvDC,EAAQ,CACV,CAACC,IAAK,EAAGC,OAAQ,GACjB,CAACD,IAAK,GAAIC,OAAQ,GAClB,CAACD,IAAK,GAAIC,OAAQ,GAClB,CAACD,IAAK,GAAIC,OAAQ,IAETC,EAAaP,EAAWE,KAAI,SAACM,EAAOC,GAC7C,IAAMC,EAAW,CAAC,EAAG,GAKrB,OAJAN,EAAMO,SAAQ,SAACC,GACPH,IAAMG,EAAEP,IAAKK,EAAS,GAAKE,EAAEN,OACxB,GAAKG,IAAMG,EAAEP,MAAKK,EAAS,GAAKE,EAAEN,WAExCI,K,gCCREG,EAAkCC,YAC3C,YACA,SAACC,EAAD,GAAqC,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAClBA,EAASC,EAAYH,IACrB,IAAOI,EAAeH,IAAWZ,MAA1Be,YACAC,EAAgBJ,IAAWK,MAA3BD,aACHD,EAAYC,KACZH,EAASK,GAAeF,EAAe,IAAM,IAC7CH,EAASM,GAAiBC,GAAiBR,KAAY,SAQ7DS,EAAc,SAACC,EAAeT,GAChCA,EAASU,EAAUD,IACnBT,EAASW,KACTX,EAASY,GAAYtB,KAGZuB,EAAchB,YACvB,cADuC,uCAEvC,WAAOX,EAAP,0BAAAS,EAAA,6DAAWI,EAAX,EAAWA,SAAUC,EAArB,EAAqBA,SAArB,EAC2BD,IAAhBZ,EADX,EACWA,MAAOiB,EADlB,EACkBA,MACTjB,EAAM2B,MAAMC,QAAO,SAACpB,EAAGqB,GAAJ,OAAUrB,EAAIqB,EAAEZ,EAAMa,eAAc,IACxDT,EAAYJ,EAAMa,YAAajB,GAHvC,SAVO,IAAIkB,SAAc,SAACC,GAAD,OAAOC,YAAW,kBAAMD,MAAK,QAUtD,mFAFuC,yDAW9BE,EAAaC,YAAY,CAClCC,KAAM,QACNC,aA/C6B,CAC7BrB,aAAc,EACdc,YAAa,EACbnB,SAAU,CAAC,EAAG,GACd2B,UAAU,EACVC,YAAY,EACZC,YAAa,CAAC,WAAY,YAC1BC,aAAa,EACbC,SAAS,EACTC,OAAQ,CAAC,EAAG,IAuCZC,SAAU,CACN9B,YAAa,SAAC+B,EAAD,GAAgD,IAAvCC,EAAsC,EAAtCA,QAClBD,EAAMlC,SAAWmC,EACjBD,EAAMP,UAAW,GAErBS,WAAY,SAACF,GACTA,EAAMP,UAAW,GAErBU,WAAY,SAACH,GACTA,EAAMN,YAAa,GAEvBU,eAAgB,SAACJ,EAAD,GAAyC,IAAhCC,EAA+B,EAA/BA,QACrBD,EAAML,YAAYM,EAAQI,QAAUJ,EAAQV,MAEhDe,UAAW,SAACN,GACRA,EAAMJ,aAAc,GAExBjB,QAAS,SAAAqB,GACLA,EAAMH,SAAU,GAEpBnB,UAAW,SAACsB,EAAD,GAAqC,IAA5BC,EAA2B,EAA3BA,QAChBD,EAAMF,OAAOG,OAGrBM,cAAe,SAAAC,GACXA,EAAQC,QAAQ5B,EAAY6B,SAAS,SAAAV,GAAU,IAAD,EACA,CAACA,EAAMf,YAAae,EAAM7B,cAAnE6B,EAAM7B,aADmC,KACrB6B,EAAMf,YADe,KAE1Ce,EAAMP,UAAW,EACjBO,EAAMN,YAAa,KAElBe,QAAQ5B,EAAY8B,WAAW,SAAAX,GAC5BA,EAAMN,YAAa,EACnBM,EAAMH,SAAU,QAKzB,EAA6FR,EAAWuB,QAAjG3C,EAAP,EAAOA,YAAaiC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,WAAYC,EAA5C,EAA4CA,eAAgBE,EAA5D,EAA4DA,UAAW3B,EAAvE,EAAuEA,QAASD,EAAhF,EAAgFA,UAExEW,IAAf,QACawB,EAAqB,SAACb,GAAD,OAAuBA,EAAM5B,MAAMD,cAExD2C,EAAiB,SAACd,GAAD,OAAuBA,EAAM5B,MAAMN,UACpDiD,EAAiB,SAACf,GAAD,OAAuBA,EAAM5B,MAAMqB,UACpDuB,EAAmB,SAAChB,GAAD,OAAuBA,EAAM5B,MAAMsB,YACtDuB,EAAoB,SAACjB,GAAD,OAAuBA,EAAM5B,MAAMuB,aACvDuB,EAAoB,SAAClB,GAAD,OAAuBA,EAAM5B,MAAMwB,aACvDuB,EAAkB,SAACnB,GAAD,OAAuBA,EAAM5B,MAAMyB,SACrDuB,EAAe,SAACpB,GAAD,OAAuBA,EAAM5B,MAAM0B,QCrGzDuB,EAAU,kBAAM/E,KAAKC,MAAsB,EAAhBD,KAAKgF,UAAgB,GACzCC,EAAW,WACpB,IAAMC,EAAO,CAACH,IAAWA,KACzB,OAAOG,EAAK,KAAOA,EAAK,GAAjB,UAA0BA,EAASA,GAAQA,GAEzCC,EAA8B,SAA9BA,IACT,IAAMC,EAAOH,IACb,OAAIG,EAAKC,OAAS,EACPD,EAEHD,KAENG,EAAU,SAACC,GAAD,OAAiC,IAAbA,GAA8B,KAAZA,GACzCC,EAAc,SAACJ,EAAgBK,GAAjB,OAAwCL,EAAKM,QAAQD,IAAe,GCHzFE,EAAwB,SAAC,GAAwC,IAAvC9E,EAAsC,EAAtCA,MAAOiB,EAA+B,EAA/BA,MAC7B8D,EACqB,IAAvB9D,EAAMD,aAAqBhB,EAAM2B,MAAMqD,MAAM,EAAG,IAAMhF,EAAM2B,MAAMqD,MAAM,GAC5E,QAAIhF,EAAMe,YAAYE,EAAMD,cAAgB,IACsB,IAA3D+D,EAAQnD,QAAO,SAACpB,EAAGqB,GAAJ,OAAUrB,EAAIqB,EAAEZ,EAAMD,gBAAe,IAezDiE,EAAc,SAAC,EAA2BP,GAA8B,IAAxD1E,EAAuD,EAAvDA,MAAOiB,EAAgD,EAAhDA,MACzB,QArBc,SAACyD,GAAD,OAA8BA,GAAW,GAAKA,EAAU,GAqBjEQ,CAAUR,IACR1E,EAAM2B,MAAM+C,GAASzD,EAAMa,cAAgB,GAEhDqD,EAAe,SAAC,GAA+B,IAA9BnF,EAA6B,EAA7BA,MAAOiB,EAAsB,EAAtBA,MACnBN,EAA0BM,EAA1BN,SAAUK,EAAgBC,EAAhBD,aACVoE,EAAgBpF,EAAhBoF,aACDC,EAAkB,GACxB,YAAqBC,IAAjBF,GACJzE,EAASJ,SAAQ,SAAAgF,GACb,IAAMC,GAAUxE,GAAuB,EAAPuE,EAAYA,GAAOH,EAC/CH,EAAY,CAACjF,QAAOiB,SAAQuE,IAAWH,EAAMR,QAAQW,GAAU,GAAGH,EAAMI,KAAKD,GAxBvD,SAAC,EAA2BA,EAAgBH,GAAqB,IAA/DrF,EAA8D,EAA9DA,MAAOiB,EAAuD,EAAvDA,MAChCmE,EAAgBpF,EAAhBoF,aACApE,EAA0BC,EAA1BD,aAAcL,EAAYM,EAAZN,SAEf+E,EAAiB1E,EAAeoE,EAAe,EAAI,GAAKA,GACzDT,EAAYhE,EAAU+E,IDLC,SAAC,GAA8B,IAA7B1F,EAA4B,EAA5BA,MACvBgB,EADmD,EAArBC,MAC9BD,aACP,OAAQhB,EAAM2B,MAAMC,QAAO,SAACpB,EAAGqB,EAAGxB,GAC9B,OAAIW,EAAsBR,EAAIH,EAAI,GAAKwB,EAAEb,GAAiBX,EAAI,EAAGG,EACpDA,EAAI,GAAKH,GAAKwB,EAAEb,GAAiB,GAAKX,EAAIG,IACzD,GCA4CmF,CAAiB,CAAC3F,QAAOiB,UAAUyE,IAC7EZ,EAAsB,CAAC9E,QAAOiB,WAAWuE,EAAS,IAA4B,IAAvBH,EAAMR,SAAS,IACtEQ,EAAMI,MAAM,GAEZX,EAAsB,CAAC9E,QAAOiB,WAAWuE,EAAS,KAA6B,IAAvBH,EAAMR,QAAQ,KACtEQ,EAAMI,KAAK,KAeXG,CAA0B,CAAC5F,QAAOiB,SAAQuE,EAAQH,MAJfA,GAQrCQ,GAAe,SAAfA,EAAgB,EAA2BC,EAAiBC,GAA8C,IAAzF/F,EAAwF,EAAxFA,MAAOiB,EAAiF,EAAjFA,MAAmDoE,EAA8B,uDAAZ,GACxF1E,EAA0BM,EAA1BN,SAAUK,EAAgBC,EAAhBD,aACVoE,EAAgBpF,EAAhBoF,aACP,QAAqBE,IAAjBF,EAAJ,CACA,IAAMY,EAAWF,EAAUnF,EAASoF,GAC9BP,GAAUxE,GAA4B,EAAZgF,EAAiBA,GAAYZ,EAC7D,GAAIH,EAAY,CAACjF,QAAOiB,SAAQuE,GAAS,CACrCH,EAAMI,KAAKD,GACX,IAAMS,EAAmBtF,EAASqE,MAAM,EAAGe,EAAQ,GAAGnE,QAAO,SAACpB,EAAGqB,GAAJ,OAAUrB,EAAIqB,IAAG,GAC9E,GAAIkE,EAAQpF,EAAS6D,OAAS,EAAG,OAAOqB,EAAa,CAAC7F,QAAOiB,SAAQgF,EAAkBF,EAAQ,EAAGV,GAEtG,OAAOA,IAEEjE,GAAmB,SAAC,GAAkD,IAAjDpB,EAAgD,EAAhDA,MAAOiB,EAAyC,EAAzCA,MAAmBiF,EAAsB,wDACxEb,EAAkBF,EAAa,CAACnF,QAAOiB,UACvCsD,EAAI,YAAOtD,EAAMN,UACvB,OAAIuF,EAAkBb,EAClBA,EAAMb,OACA,GAAN,mBAAWa,GAAX,YAAqBQ,GAAa,CAAC7F,QAAOiB,SAAQsD,EAAK,GAAI,KAExDc,GAELc,GAAoB,SAAC,GAAD,IAAEnG,EAAF,EAAEA,MAAOiB,EAAT,EAASA,MAAT,OAA+BjB,EAAMe,YAAYE,EAAMD,cAAgB,GACpFoF,GAAkB,SAAC,GAA+B,IAA9BpG,EAA6B,EAA7BA,MAAOiB,EAAsB,EAAtBA,MAC7BD,EAAgBC,EAAhBD,aACAW,EAAS3B,EAAT2B,MACP,OAAIwE,GAAkB,CAACnG,QAAOiB,WAClBG,GAAiB,CAACpB,MAAM,2BAAKA,GAAN,IAAaoF,aAAcpE,EAAe,IAAM,IAAIC,UAAQuD,OAEvF7C,EAAM7B,KAAI,SAACM,EAAOC,GACtB,OAAID,EAAMY,GAAgB,EACfI,GAAiB,CAACpB,MAAM,2BAAKA,GAAN,IAAaoF,aAAc/E,IAAIY,UACnD,MACfoF,OAAM,SAAAC,GAAa,OAAKA,EAAc9B,WAEvC+B,GAAsB,SAAC1F,EAAoB2F,EAAoBtD,EAAeuD,IAC5D,IAAhBD,GAAoC,KAAfA,EAIzBC,EAAaD,GAAYtD,KAHrBrC,EAAS6F,GAAcxD,KAmBzByD,GAAY,SAAC9F,EAAD,EAAgD6D,GAAiC,IAA3D1E,EAA0D,EAA1DA,MAAOiB,EAAmD,EAAnDA,MACrCwF,EAAY,YAAOzG,EAAM2B,MAAM7B,KAAI,SAAAM,GAAK,mBAAQA,OACtD,GAAIJ,EAAMsG,cAAczB,QAAQH,IAAY,EAAG,CAG3C,GADA6B,GAAoB1F,EAAUb,EAAMoF,aAAcnE,EAAMD,aAAcyF,GAClE/B,EAAU,GAAKA,EAAU,GAAI,OAAO+B,GAnBzB,SAACD,EAAoBtD,EAAeuD,GACvDA,EAAaD,GAAYtD,KAmBrB0D,CAAelC,EAASzD,EAAMD,aAAcyF,GAV5B,SAAC,EAA2B/B,GAA8B,IAAxD1E,EAAuD,EAAvDA,MAAOiB,EAAgD,EAAhDA,MAC7B,OAAmD,IAA5CjB,EAAM2B,MAAM+C,GAASzD,EAAMa,aAU1B+E,CAAgB,CAAC7G,QAAOiB,SAAQyD,IAlBrB,SAAC7D,EAAD,EAGT6D,EAAiB+B,GAAmC,EAF9DzG,MAE+D,IAD/DiB,EAC8D,EAD9DA,MAEAsF,GAAoB1F,EAAU6D,EAASzD,EAAMa,YAAa2E,GAC1D5F,EAASiG,GAAU7F,EAAMa,cAayBiF,CAAelG,EAAU,CAACb,QAAOiB,SAAQyD,EAAS+B,GAEpG,OAAOA,GA6BEO,GAAoB,SAACnE,EAAkBhC,EAAoB6D,GACpE7D,EAASY,GAAYkF,GAAU9F,EAAUgC,EAAO6B,KAChD7D,EAASC,EDzGiB,SAAC,EAA2B4D,GAAqB,IAA/C1E,EAA8C,EAA9CA,MAAOiB,EAAuC,EAAvCA,MAC7BsD,EAAI,YAAOtD,EAAMN,UAEjBiE,EAAazF,KAAK8H,IAAIvC,EAAU1E,EAAMoF,cAO5C,OANIT,EAAYJ,EAAMK,GA1BL,SAACL,EAAgBK,GAC3BL,EAAK2C,OAAO3C,EAAKM,QAAQD,GAAa,GAyBVuC,CAAa5C,EAAMK,GAC7CH,EAAQC,GAlBQ,SAACA,EAAiBH,EAAeK,GAC1DL,EAAK2C,OAAO3C,EAAKM,QAAQN,EAAK6C,QAAO,SAAA7B,GAAG,OAAIA,EAAMX,KAAYyC,MAAK,SAAC7G,EAAGqB,GAAJ,OAAUrB,EAAIqB,KAAG,IAAK,GAkBrFyF,CAAqB5C,EAASH,EAAMK,GAC5BH,EAAQC,IAjBY,SAACH,EAAiBK,GAElD,IADA,IAAI2C,EAAU,EACPhD,EAAKS,MAAM,EAAGuC,GAAS3F,QAAO,SAACpB,EAAGqB,GAAJ,OAAUrB,EAAIqB,IAAG,GAAK+C,GAEvD,GADA2C,IACIhD,EAAKS,MAAM,EAAGuC,GAAS3F,QAAO,SAACpB,EAAGqB,GAAJ,OAAUrB,EAAIqB,IAAG,KAAO+C,EAAY,CAClEL,EAAK2C,OAAO,EAAGK,GACf,OAYJC,CAA4BjD,EAAMK,GAE/BL,EC+FckD,CAAe5E,EAAO6B,KAC3C7D,EAASK,GAAe2B,EAAM7C,MAAMoF,gBCrIlC/C,GAA2B,CAC7B+C,kBAAcE,EACd3D,MAAOxB,EACPmG,cAAe,GACfvF,YAAa,CAAC,EAAG,IAEf2G,GAAW,SAAC7G,GACdA,EAAS8G,MACT9G,EAASM,GAAiB,KAC1BN,EAASC,EAAY,KAErBD,EAASa,MAGAkG,GAAqBlH,YAC9B,qBACA,SAACgE,EAAD,GAAoC,IAAzB9D,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SACjB,EAAsCD,IAAWZ,MAA1CoF,EAAP,EAAOA,aAAckB,EAArB,EAAqBA,cACrB,QAAqBhB,IAAjBF,GAA8BA,IAAiBV,EAAS,CAIxD,GAHI0B,GAAgBxF,MAChB8G,GAAS7G,IAE2B,IAApCyF,EAAczB,QAAQH,GAAiB,OAM3C,OALAsC,GAAkBpG,IAAYC,EAAU6D,GDoGhB,SAAC,EAA0B7D,GAAwB,IAAjDb,EAAgD,EAAhDA,MAAMiB,EAA0C,EAA1CA,MACxC,GAAIkF,GAAkB,CAACnG,QAAOiB,UAAS,CACnC,IAAM4G,EAAS5G,EAAMD,aAAe,IAAM,EAC1CH,EAASK,GAAe2G,IACxBhH,EAASM,GAAiBC,GAAiB,CAACpB,MAAM,2BAAIA,GAAL,IAAYoF,aAAayC,IAAS5G,aCvG/E6G,CAAqBlH,IAAYC,QAC5BD,IAAWK,MAAMN,SAAS6D,SAAU4B,GAAgBxF,MACrD8G,GAAS7G,IAIZD,IAAWK,MAAMN,SAAS6D,SAG3B4B,GAAgBxF,MAChB8G,GAAS7G,GDtCgB,SAAC,EAA2B6D,GAAiC,IAA3D1E,EAA0D,EAA1DA,MAAOiB,EAAmD,EAAnDA,MAC1C,QAAgBqE,IAAZZ,EACJ,OAAO1E,EAAM2B,MAAM+C,GAASzD,EAAMD,cAAgB,ECsC1C+G,CAAsBnH,IAAY8D,KDoEhB,SAAC,EAA2BA,GAAqB,IAA/C1E,EAA8C,EAA9CA,MAAOiB,EAAuC,EAAvCA,MACnC,OAAQG,GAAiB,CACrBpB,MAAM,2BAAKA,GAAN,IAAaoF,aAAcV,IAChCzD,UACDnB,KAAI,SAAAkI,GAAI,OAAI7I,KAAK8H,IAAIvC,EAAUsD,MAAOxD,OCxEcyD,CAAerH,IAAY8D,IAC1E7D,EAASK,GAAewD,IAE5B7D,EAASM,GAAiBC,GAAiBR,WAItCsH,GAAa/F,YAAY,CAClCC,KAAM,QACNC,gBACAO,SAAU,CACN1B,eAAgB,SAAC2B,EAAD,GAAmC,IAA1BC,EAAyB,EAAzBA,SD+DN,SAACD,EAAmBC,GAC3C,YAA2BwC,IAAvBzC,EAAMuC,eACNvC,EAAMuC,aAAetC,GACd,ICjECqF,CAAYtF,EAAOC,IDqEN,SAACD,EAAmBC,GACzCD,EAAMuC,eAAiBtC,IACvBD,EAAMuC,kBAAeE,EACrBzC,EAAMyD,cAAgB,ICvElB8B,CAAcvF,EAAOC,IAEzB6E,aAAc,SAAC9E,GACXA,EAAMuC,kBAAeE,GAEzBnE,iBAAkB,SAAC0B,EAAD,GAAmC,IAA1BC,EAAyB,EAAzBA,QACvBD,EAAMyD,cAAgBxD,GAE1BrB,YAAa,SAACoB,EAAD,GAAoC,IAA3BC,EAA0B,EAA1BA,QAClBD,EAAMlB,MAAQmB,GAElBgE,UAAW,SAACjE,EAAD,GAAqC,IAA5BC,EAA2B,EAA3BA,QAChBD,EAAM9B,YAAY+B,MAEtB4D,cAAe,SAAC7D,EAAD,GAAqC,IAA5BC,EAA2B,EAA3BA,QACpBD,EAAM9B,YAAY+B,SAKvB,GAOHoF,GAAWzE,QANXvC,GADG,GACHA,eACAyG,GAFG,GAEHA,aACAxG,GAHG,GAGHA,iBACAM,GAJG,GAIHA,YACAqF,GALG,GAKHA,UACAJ,GANG,GAMHA,cAGStB,GAAe,SAACvC,GAAD,OAAsBA,EAAM7C,MAAMoF,cACjDiD,GAAc,SAACxF,GAAD,OAAsBA,EAAM7C,MAAM2B,OAChD2G,GAAsB,SAACzF,GAAD,OAAsBA,EAAM7C,MAAMsG,eACxDiC,GAAoB,SAAC1F,GAAD,OAAsBA,EAAM7C,MAAMe,aACpDmH,MAAf,QCtDeM,GA3BuD,SAAC,GACxB,IAA1CnJ,EAAyC,EAAzCA,UAAWW,EAA8B,EAA9BA,MAAOT,EAAuB,EAAvBA,IAAKwG,EAAkB,EAAlBA,MAClBlF,EAAWrB,IACXiJ,EAAW/I,EAAe0F,IAE1BsD,EADgBhJ,EAAe4I,IACAzD,QAAQkB,IAAU,GAAK,kBAItD7F,EAASF,EAAM4B,QAAO,SAACpB,EAAGqB,GAAJ,OAAUrB,EAAIqB,KACpC8G,EAAe,SAACtI,GAClB,MAAO,CAAC,OAAQ,gBAAiBL,EAAM,GAAK,EAAI,aAAe,aAAcyI,IAAa1C,GAAS1F,IAAMH,EAAS,GAAK,YAAY0I,KAAK,MAEtIC,EAAY,YAAIhJ,MAAMK,IAASJ,KAAI,SAACC,EAAGM,GAAJ,OAAU,cAAC,EAAD,CAAMd,IAAKA,EAAKL,SAAUmB,EAAGhB,UAAWsJ,EAAatI,IAC1CA,MAC9D,OACI,0BACIhB,UAAWyJ,IAAON,MAClB,cAAY,QACZO,QAbW,WACflI,EAAS+G,GAAmB7B,KAS5B,UAKI,qBAAK1G,UAAS,UAAKA,EAAL,YAAkBqJ,KAC/BG,M,oBCTEG,GAhBF,SAAC,GAAkB,IAAjBzJ,EAAgB,EAAhBA,IACLwB,EAAcrB,EAAe6I,IAC7BvI,EAAQT,EAAMwB,EAAY,GAAKA,EAAY,GAC3CkI,EAAa1J,EACb,CAAC,OAAQ,cACT,CAAC,OAAQ,cACf,OAAO,qBAAKF,UAAWyJ,KAAOE,KAAvB,SACF,YAAInJ,MAAMG,IAAQF,KAAI,SAACoJ,EAAM7I,GAAP,OAAa,cAAC,EAAD,CAChCd,IAAKA,EACLF,UAAW4J,EAAWL,KAAK,KAC3B1J,SAAUmB,GACLA,SCaF8I,GArBC,SAAC,GAAkC,IAAjC5J,EAAgC,EAAhCA,IAAM6J,EAA0B,EAA1BA,GAAI/J,EAAsB,EAAtBA,UAElBgK,EADQ3J,EAAe2I,IACPrD,MAAW,EAALoE,EAAa,EAALA,EAAS,GACvCT,EAAe,SAACtI,GAClB,IACMiJ,EAAcjJ,EAAI,EAAI,QAAU,MACtC,OAAOd,EAAG,qBAFOc,EAAI,EAAI,QAAU,OAEzB,mBAA0CiJ,IAElDC,EAASF,EAAQvJ,KAAI,SAACM,EAAO2F,GAC/B,IAAM1F,EAAId,EAAM,EAAIwG,EAAQA,EAC5B,OAAO,cAAC,GAAD,CAAOxG,IAAKA,EAAKS,MAAOqJ,EAAQhJ,GAAYhB,UAAWsJ,EAAatI,GAAI0F,MAAY,EAALqD,EAAS/I,GAA/CA,MAGpD,OACI,qBAAKhB,UAAWyJ,IAAOK,QAAS,cAAY,UAA5C,SACI,sBAAK9J,UAAWA,EAAhB,UAA4BkK,EACvBH,EAAK,GAAK,cAAC,GAAD,CAAM7J,IAAKA,GAAU,SCNjCiK,GAhBD,SAACxK,GACX,IAAMO,EAAM,CAAC,cAAC,GAAD,CAAS6J,GAAI,EAAG7J,KAAG,GAAM,GAAM,cAAC,GAAD,CAAS6J,GAAI,EAAG7J,KAAG,GAAM,IAC/DkK,EAAS,CAAC,cAAC,GAAD,CAASL,GAAI,GAAQ,GAAM,cAAC,GAAD,CAASA,GAAI,GAAQ,IAEhE,OACI,oCACI,yBAAS9J,MAAO,CAACoK,OAAQ,IAAKC,cAAe,eAA7C,SACKpK,IAEL,kCACKkK,Q,oBCjBF,OAA0B,mCCA1B,OAA0B,mCCA1B,OAA0B,mCCA1B,OAA0B,mCCA1B,OAA0B,mCCA1B,OAA0B,mCCwB1BG,GAXF,SAAC5K,GAEV,IACI6K,EADW,CAACC,GAAKC,GAAKC,GAAOC,GAAMC,GAAMC,IACxBnL,EAAMoL,IAAM,GACjC,OACI,qBAAK/K,UAAWyJ,KAAOc,KAAvB,SACI,qBAAKS,IAAKR,EAASS,IAAI,MAAMhL,MAAO,CAACiL,MAAO,cCazCC,OApBf,SAAoBxL,GAChB,IAAM2B,EAAWjB,EAAeiE,GAC1BrB,EAAW5C,EAAekE,GAC1B/C,EAAWrB,IAQjB,OACI,0BAASH,UAAU,iBAAiB0J,QARpB,SAAC0B,GAEjB,GADAA,EAAEC,kBACGpI,EAAL,CACAzB,EAASkC,GACT,IAAMwB,EAAOH,IACbvD,EAASJ,EAAgC8D,MAGzC,UACK5D,EAASb,KAAI,SAACyF,EAAKlF,GAAN,OAAY,cAAC,GAAD,CAAM+J,IAAK7E,GAAUlF,OAC7CM,EAAS6D,QAAU,cAAC,GAAD,CAAM4F,IAAK,KAC9BzJ,EAAS6D,QAAU,cAAC,GAAD,CAAM4F,IAAK,QC3B/BO,GAAS,CAClBzL,SAAU,WACVK,IAAK,MACLqL,KAAM,MACNC,UAAW,wBACXC,OAAQ,KAGCC,GAAY,2BAClBJ,IADkB,IACVJ,MAAO,QAClBS,gBAAiB,QACjBC,aAAc,MACdC,QAAS,OACTC,UAAW,uBACXC,QAAS,EACTC,WAAY,eAEHC,GAAW,2BACjBP,IADiB,IACHK,QAAS,ICMfG,OAff,SAA0BvM,GACtB,IAAMuD,EAAa7C,EAAemE,GAC5BX,EAASxD,EAAegE,GACxBlB,EAAc9C,EAAeoE,GAE7B0H,EADU9L,EAAesE,GACR,UAAMxB,EAAYU,GAAlB,+CAAkEV,EAAYU,IAErG,OACI,sBAAK5D,MAAOiD,EAAa+I,GAAcP,GAAvC,UACI,oBAAIzL,MAAO,CAACmM,UAAW,UAAvB,SAAmCD,IACnC,oBAAIlM,MAAO,CAACmM,UAAW,UAAvB,sC,SCYGC,OAvBf,SAAmB1M,GACf,IAAM6B,EAAWrB,IACjB,EAA4BmM,mBAAS,GAArC,oBAAOzI,EAAP,KAAe0I,EAAf,KACMpJ,EAAc9C,EAAeoE,GACnC,EAAwB6H,mBAASnJ,EAAYU,IAA7C,oBAAOd,EAAP,KAAayJ,EAAb,KAUA,OACI,0BAASvM,MAAO4D,EAAS,EAAIoI,GAAcP,GAA3C,UACI,0DAA6BvI,EAAYU,MACzC,uBAAO5D,MAAO,CAACiL,MAAO,MAAOuB,SAAU,WAAYC,KAAK,OAAOC,MAAO5J,EAAM6J,SAZjE,SAACxB,GAChBoB,EAAQpB,EAAEjF,OAAOwG,UAYb,wBAAQ1M,MAAO,CAACwM,SAAU,OAAQI,aAAc,GAAGC,WAAY,GAAI5B,MAAO,OAAQxB,QAVzE,SAAC0B,GACdmB,EAAU1I,EAAS,IAClBA,GAAU2I,EAAQrJ,EAAY,IAC/B3B,EAASoC,EAAe,CAACC,SAAQd,UAC7Bc,GAAQrC,EAASsC,MAMjB,sBCPGiJ,OAXf,SAAuBpN,GACnB,IAAMgC,EAAetB,EAAegE,GAC9BlB,EAAc9C,EAAeoE,GACnC,OACI,0BAASxE,MAAO,CAAC+M,QAAS,QAA1B,UACI,qBAAI/M,MAAO,CAACgN,aAAc,IAA1B,mCAAsD9J,EAAYxB,MAClE,cAAC,EAAD,CAAM9B,SAAU,EAAGG,UAAS,eAAU2B,EAAe,aAAe,oBCOjEuL,OAXf,SAAuBvN,GACnB,IAAMwD,EAAc9C,EAAeoE,GAC7BnB,EAASjD,EAAeuE,GAC9B,OACI,sBAAK3E,MAAO,CAACgN,aAAc,KAA3B,UACI,8BAAI9J,EAAY,GAAhB,KAAsBG,EAAO,MAC7B,8BAAIH,EAAY,GAAhB,KAAsBG,EAAO,UCyC1B6J,OArCf,WACI,IAAM3L,EAAWrB,IACXiD,EAAc/C,EAAeqE,GACnC0I,qBAAU,WAEN,GADA5L,EAASmC,KACJP,EAAL,CACA,IAAM8B,EAAOD,IACbzD,EAASC,EAAYyD,IACjBA,EAAK,GAAKA,EAAK,IAAI1D,EAASa,QACjC,CAACb,EAAU4B,IACd,IAGMzB,EAAetB,EAAegE,GAEpC,OACI,0BAASpE,MAAOqL,GAAhB,UACI,cAAC,GAAD,CAAkBzH,OAAQ,SAC1B,cAAC,GAAD,IACA,0BAAS5D,MAAO,CAAC+M,QAAS,OAAQK,eAAe,iBAAjD,UACA,cAAC,GAAD,IACA,cAAC,GAAD,OAEA,0BAASrN,UAAW,QAApB,UACI,yBAASC,MAAO,CAAC+M,QAAS,gBAA1B,SACI,cAAC,GAAD,MAGJ,yBAAShN,UAAU,OAAO0J,QAlBtB,WACZlI,EAAS+G,GAAmB5G,GAAgB,EAAI,MAiBxC,SACI,cAAC,GAAD,SAGR,sBAAK1B,MAAO,CAACJ,SAAS,WAAYuK,OAAO,EAAGqC,SAAU,GAAtD,2BAAwE,mBAAGa,KAAK,+CAA+CC,MAAM,cAA7D,yBAAxE,SAAwK,mBAAGD,KAAK,4BAA4BC,MAAM,WAA1C,qCCtCrKC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJDQ,GAAQC,YAAe,CAChCC,QAAS,CACLxN,MAAOyN,GACPxM,MAAOyM,KCAfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACF,cAAC,GAAD,QAGFQ,SAASC,eAAe,SAM1BlB,O","file":"static/js/main.a1dc8780.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quarter\":\"Quarter_Quarter__3woYV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Field\":\"Field_Field__Z28Dh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Edge\":\"Edge_Edge__2i6XZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dice\":\"Dice_Dice__2ENsz\"};","import React from \"react\";\n\ntype Props = {\n    className?: string;\n    position: number;\n    top?: boolean;\n};\n\nconst Chip: React.FC<Props> & React.HTMLAttributes<HTMLDivElement> = (\n    props\n) => {\n    const skew = (props.position % 5) * 55 + Math.floor(props.position / 5) * 20;\n    return (\n        <button\n            className={props.className}\n            style={props.top ? {top: skew,} : {top: 245 - skew}\n            }\n            data-testid=\"Chip\"\n        />\n    );\n};\n\nexport default Chip;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {PayloadAction} from \"@reduxjs/toolkit\";\n\nexport interface BoardState {\n    selectedChip: number | undefined,\n    board: number[][],\n    possibleMoves: number[],\n    kickedChips: number[],\n}\n\nexport type ChipAction = PayloadAction<number | undefined>;\nexport type MoveAction = PayloadAction<number[]>;\nexport type BoardAction = PayloadAction<number[][]>;\nexport type PlayerAction = PayloadAction<1 | 0>;\n\nconst emptyBoard: number[][] = [...Array(24)].map((_) => [0, 0]);\n\nconst chips = [\n    {pos: 0, amount: 2},\n    {pos: 11, amount: 5},\n    {pos: 16, amount: 3},\n    {pos: 18, amount: 5},\n];\nexport const startBoard = emptyBoard.map((field, i) => {\n    const newField = [0, 0]\n    chips.forEach((a) => {\n        if (i === a.pos) newField[0] = a.amount;\n        else if (23 - i === a.pos) newField[1] = a.amount;\n    });\n    return newField;\n});\n","import {createAsyncThunk, createSlice, Dispatch, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from '../app/store';\nimport {PlayerNameAction, RoundState} from \"./roundHelper\";\nimport {selectUnselect, setPossibleMoves, updateBoard} from \"./boardSlice\";\nimport {getPossibleMoves} from \"./moveChipsHelper\";\nimport {PlayerAction, startBoard} from \"./boardHelper\";\n\n\nconst initialState: RoundState = {\n    activePlayer: 0,\n    enemyPlayer: 1,\n    diceRoll: [1, 1],\n    newRound: true,\n    showPopper: true,\n    playerNames: ['player 1', 'player 2'],\n    gameStarted: false,\n    gameEnd: false,\n    points: [0, 0]\n}\n\nexport const rollDiceAndCheckForKickedStones = createAsyncThunk<void, number[], { state: RootState, dispatch: Dispatch }>(\n    \"rollDice\",\n    (diceRoll, {getState, dispatch}) => {\n        dispatch(setDiceRoll(diceRoll));\n        const {kickedChips} = getState().chips;\n        const {activePlayer} = getState().round;\n        if (kickedChips[activePlayer]) {\n            dispatch(selectUnselect(activePlayer ? 24 : -1))\n            dispatch(setPossibleMoves(getPossibleMoves(getState(), true)));\n        }\n    }\n)\n\nconst waitABit = () => {\n    return new Promise<void>((r) => setTimeout(() => r(), 1000));\n}\nconst finishRound = (winner: 1 | 0, dispatch:Dispatch) => {\n    dispatch(addPoints(winner))\n    dispatch(endGame())\n    dispatch(updateBoard(startBoard))\n}\n\nexport const swapPlayers = createAsyncThunk<void, void, { state: RootState, dispatch: Dispatch }>(\n    'swapPlayers',\n    async (_, {getState, dispatch}) => {\n        const {chips, round} = getState();\n        if (!chips.board.reduce((a, b) => a + b[round.enemyPlayer], 0)) {\n            finishRound(round.enemyPlayer, dispatch)\n        }\n        return await waitABit();\n    }\n);\n\nexport const roundSlice = createSlice({\n    name: 'round',\n    initialState,\n    reducers: {\n        setDiceRoll: (state, {payload}: PayloadAction<number[]>) => {\n            state.diceRoll = payload;\n            state.newRound = false;\n        },\n        beginRound: (state) => {\n            state.newRound = false\n        },\n        hidePopper: (state) => {\n            state.showPopper = false;\n        },\n        savePlayerName: (state, {payload}: PlayerNameAction) => {\n            state.playerNames[payload.player] = payload.name;\n        },\n        startGame: (state) => {\n            state.gameStarted = true;\n        },\n        endGame: state => {\n            state.gameEnd = true\n        },\n        addPoints: (state, {payload}: PlayerAction) => {\n            state.points[payload]++;\n        }\n    },\n    extraReducers: builder => {\n        builder.addCase(swapPlayers.pending, state => {\n            [state.activePlayer, state.enemyPlayer] = [state.enemyPlayer, state.activePlayer];\n            state.newRound = true;\n            state.showPopper = true;\n        })\n            .addCase(swapPlayers.fulfilled, state => {\n                state.showPopper = false;\n                state.gameEnd = false;\n            })\n    }\n});\n\nexport const {setDiceRoll, beginRound, hidePopper, savePlayerName, startGame, endGame, addPoints} = roundSlice.actions;\n\nexport default roundSlice.reducer;\nexport const selectActivePlayer = (state: RootState) => (state.round.activePlayer);\nexport const selectEnemyPlayer = (state: RootState) => (state.round.enemyPlayer);\nexport const selectDiceRoll = (state: RootState) => (state.round.diceRoll);\nexport const selectNewRound = (state: RootState) => (state.round.newRound);\nexport const selectShowPopper = (state: RootState) => (state.round.showPopper);\nexport const selectPlayerNames = (state: RootState) => (state.round.playerNames);\nexport const selectGameStarted = (state: RootState) => (state.round.gameStarted);\nexport const selectGameEnded = (state: RootState) => (state.round.gameEnd);\nexport const selectPoints = (state: RootState) => (state.round.points);\n","import {RootState} from \"../app/store\";\n\n\nconst rollDie = () => Math.floor(Math.random() * 6) + 1;\nexport const rollDice = () => {\n    const roll = [rollDie(), rollDie()];\n    return roll[0] === roll[1] ? [...roll, ...roll] : roll\n}\nexport const determineStartingPlayer:any = () => {\n    const dice = rollDice();\n    if (dice.length < 3) {\n        return dice;\n    }\n    return  determineStartingPlayer();\n}\nconst jumpout = (fieldId:number) => fieldId === -1 || fieldId === 24;\nexport const oneDieExact = (dice: number[], stepsTaken: number) => dice.indexOf(stepsTaken) >= 0;\nconst removeOneDie = (dice: number[], stepsTaken: number) =>{\n    return dice.splice(dice.indexOf(stepsTaken), 1);}\nexport const highestDieNeeded = ({chips, round}:RootState) => {\n    const {activePlayer} = round;\n    return (chips.board.reduce((a, b, i) => {\n        if (activePlayer) return (a < i + 1 && b[activePlayer]) ? i + 1: a;\n        else return (a < 24 - i && b[activePlayer]) ? 24 - i : a;\n    },0));\n}\nconst removeWhenJumpingOut = (fieldId: number, dice:number[], stepsTaken:number) => {\n    dice.splice(dice.indexOf(dice.filter(die => die > stepsTaken).sort((a, b) => a - b)[0]), 1);\n}\nconst removeWhenUsingMultipleDice = (dice:  number[], stepsTaken: number) => {\n    let counter = 0\n    while (dice.slice(0, counter).reduce((a, b) => a + b, 0) < stepsTaken) {\n        counter++;\n        if (dice.slice(0, counter).reduce((a, b) => a + b, 0) === stepsTaken) {\n            dice.splice(0, counter);\n            break;\n        }\n    }\n}\nexport const removeDiceUsed = ({chips, round}: RootState, fieldId: number) => {\n    const dice = [...round.diceRoll];\n    //@ts-ignore gets executed only after check for selectedChip\n    const stepsTaken = Math.abs(fieldId - chips.selectedChip)\n    if (oneDieExact(dice, stepsTaken)) removeOneDie(dice, stepsTaken);\n    else if (jumpout(fieldId) ) {\n        removeWhenJumpingOut(fieldId, dice, stepsTaken);\n    } else if (!jumpout(fieldId)) {\n        removeWhenUsingMultipleDice(dice, stepsTaken)\n    }\n    return dice;\n}\n","import {RootState} from \"../app/store\";\nimport {Dispatch} from \"@reduxjs/toolkit\";\nimport {kickStone, returnOnBoard, selectUnselect, setPossibleMoves, updateBoard} from \"./boardSlice\";\nimport {setDiceRoll} from \"./roundSlice\";\nimport {highestDieNeeded, oneDieExact, removeDiceUsed} from \"./diceHelper\";\nimport {BoardState} from \"./boardHelper\";\n\n\nexport const playerHasChipsOnField = ({chips, round}: RootState, fieldId: number | undefined) => {\n    if (fieldId === undefined) return undefined\n    return chips.board[fieldId][round.activePlayer] > 0;\n}\nconst isOnBoard = (fieldId: number): boolean => fieldId >= 0 && fieldId < 24;\nconst allChipsInHomeQuarter = ({chips, round}: RootState): boolean => {\n    const notHome =\n        round.activePlayer === 0 ? chips.board.slice(0, 18) : chips.board.slice(6);\n    if (chips.kickedChips[round.activePlayer] > 0) return false;\n    return notHome.reduce((a, b) => a + b[round.activePlayer], 0) === 0;\n};\nconst addJumpoutToPossibleMoves = ({chips, round}: RootState, target: number, moves: number[]) => {\n    const {selectedChip} = chips;\n    const {activePlayer, diceRoll} = round;\n    //@ts-ignore gets called only with selectedChip\n    const distanceToExit = activePlayer ? selectedChip + 1 : 24 - selectedChip\n    if (!oneDieExact(diceRoll, distanceToExit) && highestDieNeeded({chips, round}) > distanceToExit) return;\n    if (allChipsInHomeQuarter({chips, round}) && target < 0 && moves.indexOf(-1) === -1) {\n        moves.push(-1)\n    }\n    if (allChipsInHomeQuarter({chips, round}) && target > 23 && moves.indexOf(24) === -1) {\n        moves.push(24);\n    }\n}\nconst fieldIsFree = ({chips, round}: RootState, fieldId: number): boolean => {\n    if (!isOnBoard(fieldId)) return false;\n    return chips.board[fieldId][round.enemyPlayer] <= 1;\n};\nconst getBaseMoves = ({chips, round}: RootState) => {\n    const {diceRoll, activePlayer} = round;\n    const {selectedChip} = chips;\n    const moves: number[] = [];\n    if (selectedChip === undefined) return moves;\n    diceRoll.forEach(die => {\n        const target = (activePlayer ? (die * -1) : die) + selectedChip;\n        if (fieldIsFree({chips, round}, target) && moves.indexOf(target) < 0) moves.push(target);\n        addJumpoutToPossibleMoves({chips, round}, target, moves);\n    })\n    return moves;\n}\nconst getNextMoves = ({chips, round}: RootState, usedDie: number, index: number, moves: number[] = []): any => {\n    const {diceRoll, activePlayer} = round;\n    const {selectedChip} = chips;\n    if (selectedChip === undefined) return;\n    const nextStep = usedDie + diceRoll[index];\n    const target = (activePlayer ? (nextStep * -1) : nextStep) + selectedChip;\n    if (fieldIsFree({chips, round}, target)) {\n        moves.push(target);\n        const usedDiceCombined = diceRoll.slice(0, index + 1).reduce((a, b) => a + b, 0)\n        if (index < diceRoll.length - 1) return getNextMoves({chips, round}, usedDiceCombined, index + 1, moves)\n    }\n    return moves\n}\nexport const getPossibleMoves = ({chips, round}: RootState, kickedOut = false) => {\n    const moves: number[] = getBaseMoves({chips, round});\n    const dice = [...round.diceRoll];\n    if (kickedOut) return moves;\n    if (moves.length) {\n        return [...moves, ...getNextMoves({chips, round}, dice[0], 1)];\n    }\n    return moves;\n}\nconst hasChipsKickedOut = ({chips, round}: RootState) => chips.kickedChips[round.activePlayer] > 0;\nexport const noMovesPossible = ({chips, round}: RootState) => {\n    const {activePlayer} = round;\n    const {board} = chips;\n    if (hasChipsKickedOut({chips, round})) {\n        return !getPossibleMoves({chips: {...chips, selectedChip: activePlayer ? 24 : -1}, round}).length\n    }\n    return (board.map((field, i) => {\n        if (field[activePlayer] > 0) {\n            return getPossibleMoves({chips: {...chips, selectedChip: i}, round})\n        } else return []\n    }).every(possibleMoves => !possibleMoves.length));\n}\nconst removeChipFromField = (dispatch: Dispatch, fieldIndex: number, player: 1 | 0, currentBoard: number[][]): void => {\n    if (fieldIndex === -1 || fieldIndex === 24) {\n        dispatch(returnOnBoard(player));\n        return\n    }\n    currentBoard[fieldIndex][player]--;\n};\nconst addChipToField = (fieldIndex: number, player: 1 | 0, currentBoard: number[][]): void => {\n    currentBoard[fieldIndex][player]++;\n};\nconst kickEnemyStone = (dispatch: Dispatch, {\n    chips,\n    round\n}: RootState, fieldId: number, currentBoard: number[][]): void => {\n    removeChipFromField(dispatch, fieldId, round.enemyPlayer, currentBoard);\n    dispatch(kickStone(round.enemyPlayer));\n}\nconst needToKickEnemy = ({chips, round}: RootState, fieldId: number): boolean => {\n    return chips.board[fieldId][round.enemyPlayer] === 1;\n}\n\nconst moveStone = (dispatch: Dispatch, {chips, round}: RootState, fieldId: number): number[][] => {\n    const currentBoard = [...chips.board.map(field => [...field])];\n    if (chips.possibleMoves.indexOf(fieldId) >= 0) {\n        //@ts-ignore gets executed only after check for selectedChip\n        removeChipFromField(dispatch, chips.selectedChip, round.activePlayer, currentBoard)\n        if (fieldId < 0 || fieldId > 23) return currentBoard\n        addChipToField(fieldId, round.activePlayer, currentBoard);\n        if (needToKickEnemy({chips, round}, fieldId)) kickEnemyStone(dispatch, {chips, round}, fieldId, currentBoard);\n    }\n    return currentBoard;\n}\n\nexport const stoneIsBlocked = ({chips, round}: RootState, fieldId: number) => {\n    return !getPossibleMoves({\n        chips: {...chips, selectedChip: fieldId},\n        round\n    }).map(move => Math.abs(fieldId - move)).length;\n}\nexport const selectStone = (state: BoardState, payload: number | undefined) => {\n    if (state.selectedChip === undefined) {\n        state.selectedChip = payload;\n        return true\n    }\n    return false\n}\nexport const unSelectStone = (state: BoardState, payload: number | undefined) => {\n    if (state.selectedChip === payload) {\n        state.selectedChip = undefined;\n        state.possibleMoves = [];\n    }\n}\nexport const selectKickedOutStone = ({chips,round}: RootState, dispatch: Dispatch) => {\n    if (hasChipsKickedOut({chips, round})) {\n        const kicked = round.activePlayer ? 24 : -1\n        dispatch(selectUnselect(kicked));\n        dispatch(setPossibleMoves(getPossibleMoves({chips:{...chips, selectedChip:kicked}, round})));\n    }\n}\nexport const moveAndUpdateDice = (state: RootState, dispatch: Dispatch, fieldId: number) => {\n    dispatch(updateBoard(moveStone(dispatch, state, fieldId)));\n    dispatch(setDiceRoll(removeDiceUsed(state, fieldId)))\n    dispatch(selectUnselect(state.chips.selectedChip));\n}\n","import {createAsyncThunk, createSlice, Dispatch} from '@reduxjs/toolkit';\nimport {RootState} from '../app/store';\nimport {BoardAction, BoardState, ChipAction, MoveAction, PlayerAction, startBoard} from \"./boardHelper\";\nimport {\n    getPossibleMoves\n    , moveAndUpdateDice,\n    noMovesPossible,\n    playerHasChipsOnField, selectKickedOutStone, selectStone, stoneIsBlocked, unSelectStone\n} from \"./moveChipsHelper\";\nimport {setDiceRoll, swapPlayers} from \"./roundSlice\";\n\n\nconst initialState: BoardState = {\n    selectedChip: undefined,\n    board: startBoard,\n    possibleMoves: [],\n    kickedChips: [0, 0]\n}\nconst endRound = (dispatch: Dispatch) => {\n    dispatch(unselectChip());\n    dispatch(setPossibleMoves([]));\n    dispatch(setDiceRoll([]));\n    // @ts-ignore\n    dispatch(swapPlayers());\n}\n\nexport const handleClickOnField = createAsyncThunk<void, number, { state: RootState, dispatch: Dispatch }>(\n    'fieldClickHandler',\n    (fieldId, {getState, dispatch}) => {\n        const {selectedChip, possibleMoves} = getState().chips;\n        if (selectedChip !== undefined && selectedChip !== fieldId) {\n            if (noMovesPossible(getState())) {\n                endRound(dispatch);\n            }\n            if (possibleMoves.indexOf(fieldId) === -1) return;\n            moveAndUpdateDice(getState(), dispatch, fieldId);\n            selectKickedOutStone(getState(), dispatch)\n            if (!getState().round.diceRoll.length || noMovesPossible(getState())) {\n                endRound(dispatch);\n            }\n            return;\n        }\n        if (!getState().round.diceRoll.length) {\n            return;\n        }\n        if (noMovesPossible(getState())) {\n            endRound(dispatch);\n        }\n        if (playerHasChipsOnField(getState(), fieldId) && !stoneIsBlocked(getState(), fieldId)) {\n            dispatch(selectUnselect(fieldId));\n        }\n        dispatch(setPossibleMoves(getPossibleMoves(getState())));\n    })\n\n\nexport const boardSlice = createSlice({\n    name: 'board',\n    initialState,\n    reducers: {\n        selectUnselect: (state, {payload}: ChipAction) => {\n            if (selectStone(state, payload)) return;\n            unSelectStone(state, payload)\n        },\n        unselectChip: (state) => {\n            state.selectedChip = undefined;\n        },\n        setPossibleMoves: (state, {payload}: MoveAction) => {\n            state.possibleMoves = payload;\n        },\n        updateBoard: (state, {payload}: BoardAction) => {\n            state.board = payload;\n        },\n        kickStone: (state, {payload}: PlayerAction) => {\n            state.kickedChips[payload]++;\n        },\n        returnOnBoard: (state, {payload}: PlayerAction) => {\n            state.kickedChips[payload]--;\n        },\n    },\n});\n\nexport const {\n    selectUnselect,\n    unselectChip,\n    setPossibleMoves,\n    updateBoard,\n    kickStone,\n    returnOnBoard\n} = boardSlice.actions;\n\nexport const selectedChip = (state: RootState) => state.chips.selectedChip;\nexport const selectBoard = (state: RootState) => state.chips.board;\nexport const selectPossibleMoves = (state: RootState) => state.chips.possibleMoves;\nexport const selectKickedChips = (state: RootState) => state.chips.kickedChips;\nexport default boardSlice.reducer;\n","import React from \"react\";\nimport styles from \"./Field.module.css\";\nimport Chip from \"../Chip/Chip\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {handleClickOnField, selectedChip,  selectPossibleMoves} from \"../../slicer/boardSlice\";\n\ntype Props = {\n    className: string;\n    chips: number[];\n    top?: boolean;\n    index: number,\n};\n\nconst Field: React.FC<Props> & React.HTMLAttributes<HTMLDivElement> = (\n    {className, chips, top, index}: Props) => {\n    const dispatch = useAppDispatch();\n    const selected = useAppSelector(selectedChip);\n    const possibleMoves = useAppSelector(selectPossibleMoves)\n    const possibleTarget = possibleMoves.indexOf(index) >= 0 && \"possible-target\";\n    const selectChip = () =>  {\n        dispatch(handleClickOnField(index))\n    }\n    const amount = chips.reduce((a, b) => a + b);\n    const getClassName = (i: number) => {\n        return [\"chip\", \"chip-absolute\", chips[0] > 0 ? \"chip-white\" : \"chip-black\", selected === index && i === amount - 1 && \"selected\"].join(' ');\n    }\n    const chipStack = [...Array(amount)].map((_, i) => <Chip top={top} position={i} className={getClassName(i)}\n                                                             key={i}/>)\n    return (\n        <section\n            className={styles.Field}\n            data-testid=\"Field\"\n            onClick={ selectChip}\n        >\n            <div className={`${className} ${possibleTarget}`}/>\n            {chipStack}\n        </section>\n    );\n};\n\nexport default Field;\n","import React from \"react\";\nimport styles from \"./Edge.module.css\";\nimport Chip from \"../Chip/Chip\";\nimport {useAppSelector} from \"../../app/hooks\";\nimport {selectKickedChips} from \"../../slicer/boardSlice\";\n\ntype Props = {\n    top?: boolean;\n};\n\nconst Edge = ({top}: Props) => {\n    const kickedChips = useAppSelector(selectKickedChips);\n    const chips = top ? kickedChips[1] : kickedChips[0]\n    const classNames = top\n        ? [\"chip\", \"chip-black\"]\n        : [\"chip\", \"chip-white\"];\n    return <div className={styles.Edge}>\n        {[...Array(chips)].map((chip, i) => <Chip\n            top={top}\n            className={classNames.join(\" \")}\n            position={i}\n            key={i}\n        />)}\n    </div>;\n};\n\nexport default Edge;\n","import React from \"react\";\nimport styles from \"./Quarter.module.css\";\nimport Field from \"../Field/Field\";\nimport Edge from \"../Edge/Edge\";\nimport {useAppSelector} from \"../../app/hooks\";\nimport {selectBoard} from \"../../slicer/boardSlice\";\n\ntype Props = {\n    top?: boolean;\n    id: number;\n    className?: string;\n};\n\nconst Quarter = ({top,  id, className}: Props) => {\n    const board = useAppSelector(selectBoard);\n    const quarter = board.slice(id * 6, id * 6 + 6);\n    const getClassName = (i: number) => {\n        const topColor = i % 2 ? 'black' : 'red';\n        const bottomColor = i % 2 ? 'black' : 'red';\n        return top ? `arrow-down ${topColor}` : `arrow-up ${bottomColor}`\n    };\n    const fields = quarter.map((field, index) => {\n        const i = top ? 5 - index : index;\n        return <Field top={top} chips={quarter[i]} key={i} className={getClassName(i)} index={id * 6 + i}\n        />\n    })\n    return (\n        <div className={styles.Quarter} data-testid=\"Quarter\">\n            <div className={className}>{fields}\n                {id % 3 && <Edge top={top} key={6}/>}</div>\n        </div>\n    );\n};\n\nexport default Quarter;\n","import React from \"react\";\nimport Quarter from \"../Quarter/Quarter\";\n\ntype Props = {\n    className?: string;\n};\n\nconst Board = (props: Props) => {\n    const top = [<Quarter id={1} top key={1}/>, <Quarter id={0} top key={0}/>];\n    const bottom = [<Quarter id={2} key={2}/>, <Quarter id={3} key={3}/>];\n\n    return (\n        <section>\n            <section style={{margin: \"0\", paddingBottom: \"0!important\"}}>\n                {top}\n            </section>\n            <section>\n                {bottom}\n            </section>\n        </section>\n    );\n};\n\nexport default Board;\n","export default __webpack_public_path__ + \"static/media/dado-1.44c20c24.svg\";","export default __webpack_public_path__ + \"static/media/dado-2.ed346677.svg\";","export default __webpack_public_path__ + \"static/media/dado-3.a2405b12.svg\";","export default __webpack_public_path__ + \"static/media/dado-4.1b71e7b1.svg\";","export default __webpack_public_path__ + \"static/media/dado-5.4bb6191d.svg\";","export default __webpack_public_path__ + \"static/media/dado-6.d5824cf7.svg\";","import React from \"react\";\nimport styles from \"./Dice.module.css\";\nimport one from \"../../img/dado-1.svg\";\nimport two from \"../../img/dado-2.svg\";\nimport three from \"../../img/dado-3.svg\";\nimport four from \"../../img/dado-4.svg\";\nimport five from \"../../img/dado-5.svg\";\nimport six from \"../../img/dado-6.svg\";\n\ntype Props = {\n    num: number;\n};\n\nconst Dice = (props: Props) => {\n\n    const points = [one, two, three, four, five, six];\n    let topSide = points[props.num - 1];\n    return (\n        <div className={styles.Dice}>\n            <img src={topSide} alt=\"one\" style={{width: \"100px\"}}/>\n        </div>\n    );\n};\n\nexport default Dice;\n","import React from 'react'\nimport Dice from \"../Dice/Dice\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {\n    beginRound, rollDiceAndCheckForKickedStones,\n    selectDiceRoll,\n    selectNewRound,\n} from \"../../slicer/roundSlice\";\nimport {rollDice} from \"../../slicer/diceHelper\";\n\ntype Props = {};\n\nfunction RolledDice(props: Props) {\n    const diceRoll = useAppSelector(selectDiceRoll);\n    const newRound = useAppSelector(selectNewRound);\n    const dispatch = useAppDispatch();\n    const rollTheDice = (e:React.MouseEvent) => {\n        e.stopPropagation();\n        if (!newRound) return;\n        dispatch(beginRound);\n        const dice = rollDice();\n        dispatch(rollDiceAndCheckForKickedStones(dice));\n    }\n    return (\n        <section className=\"vertical-align\" onClick={rollTheDice}>\n            {diceRoll.map((die, i) => <Dice num={die} key={i}/>)}\n            {!diceRoll.length && <Dice num={1}/>}\n            {!diceRoll.length && <Dice num={1}/>}\n        </section>\n    )\n}\n\nexport default RolledDice;\n","export const center = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    zIndex: 500,\n} as const\n\nexport const popperHidden = {\n    ...center, width: \"400px\",\n    backgroundColor: \"white\",\n    borderRadius: \"5px\",\n    padding: \"15px\",\n    boxShadow: \"5px 5px 28px #888888\",\n    opacity: 0,\n    transition: \"opacity 1s\"\n} as const\nexport const popperShown = {\n    ...popperHidden, opacity: 1\n    \n}\n","import React from 'react'\nimport {useAppSelector} from \"../../app/hooks\";\nimport {selectActivePlayer, selectGameEnded, selectPlayerNames, selectShowPopper} from \"../../slicer/roundSlice\";\nimport {popperHidden, popperShown} from \"../../helpers/styleHelper\";\n\ntype Props = {\n    player: string\n};\n\nfunction SwapPlayerPopper(props: Props) {\n    const showPopper = useAppSelector(selectShowPopper);\n    const player = useAppSelector(selectActivePlayer);\n    const playerNames = useAppSelector(selectPlayerNames)\n    const gameEnd = useAppSelector(selectGameEnded);\n    const message = gameEnd ? `${playerNames[player]} has won the round` : `It's your turn ${playerNames[player]}`\n\n    return (\n        <div style={showPopper ? popperShown : popperHidden}>\n            <h1 style={{textAlign: 'center'}}>{message}</h1>\n            <h2 style={{textAlign: 'center'}}>Pleas roll the dice!</h2>\n        </div>\n    )\n}\n\nexport default SwapPlayerPopper;\n","import React, {ChangeEvent, SyntheticEvent, useState} from 'react'\nimport {popperHidden, popperShown} from \"../../helpers/styleHelper\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {savePlayerName, selectPlayerNames, startGame} from \"../../slicer/roundSlice\";\n\n\ntype Props = {};\n\nfunction NameInput(props: Props) {\n    const dispatch = useAppDispatch()\n    const [player, setPlayer] = useState(0)\n    const playerNames = useAppSelector(selectPlayerNames)\n    const [name, setName] = useState(playerNames[player])\n    const changeName = (e: ChangeEvent<HTMLInputElement>) => {\n        setName(e.target.value)\n    }\n    const saveName = (e: SyntheticEvent) => {\n        setPlayer(player + 1);\n        !player && setName(playerNames[1])\n        dispatch(savePlayerName({player, name}))\n        if (player) dispatch(startGame())\n    }\n    return (\n        <section style={player < 2 ? popperShown : popperHidden}>\n            <h1>please choose your name {playerNames[player]}</h1>\n            <input style={{width: \"80%\", fontSize: \"x-large\"}} type=\"text\" value={name} onChange={changeName}/>\n            <button style={{fontSize: \"16px\", marginBottom: 15,marginLeft: 10, width: \"15%\"}} onClick={saveName}>Save</button>\n        </section>\n    )\n}\n\nexport default NameInput;\n","import React from 'react'\nimport Chip from \"../Chip/Chip\";\nimport {useAppSelector} from \"../../app/hooks\";\nimport {selectActivePlayer, selectPlayerNames} from \"../../slicer/roundSlice\";\n\n\ntype Props = {};\n\nfunction CurrentPlayer(props: Props){\n    const activePlayer = useAppSelector(selectActivePlayer);\n    const playerNames = useAppSelector(selectPlayerNames);\n    return(\n        <section style={{display: 'flex'}}>\n            <h1 style={{paddingRight: 50}}>It's your turn Player {playerNames[activePlayer]}</h1>\n            <Chip position={1} className={`chip ${activePlayer ? \"chip-black\" : \"chip-white\"}`}/>\n        </section>\n    )\n}\n\nexport default CurrentPlayer;\n","import React from 'react'\nimport {useAppSelector} from \"../../app/hooks\";\nimport {selectPlayerNames, selectPoints} from \"../../slicer/roundSlice\";\n\n//component imports\n\n//interface imports\n\ntype Props = {};\n\nfunction PointsCounter(props: Props) {\n    const playerNames = useAppSelector(selectPlayerNames);\n    const points = useAppSelector(selectPoints);\n    return (\n        <div style={{paddingRight: 100}}>\n            <p>{playerNames[0]}: {points[0]}</p>\n            <p>{playerNames[1]}: {points[1]}</p>\n        </div>\n    )\n}\n\nexport default PointsCounter;\n","import React, {useEffect} from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board/Board\";\nimport RolledDice from \"./components/rolled-dice/RolledDice\";\nimport {useAppDispatch, useAppSelector} from \"./app/hooks\";\nimport {\n    setDiceRoll,\n    selectActivePlayer,\n    swapPlayers,\n    hidePopper,\n    selectGameStarted,\n} from \"./slicer/roundSlice\";\nimport {handleClickOnField} from \"./slicer/boardSlice\";\nimport {determineStartingPlayer} from \"./slicer/diceHelper\";\nimport SwapPlayerPopper from \"./components/swap-player-popper/SwapPlayerPopper\";\nimport {center} from \"./helpers/styleHelper\";\nimport NameInput from \"./components/name-input/NameInput\";\nimport CurrentPlayer from \"./components/current-player/CurrentPlayer\";\nimport PointsCounter from \"./components/points-counter/PointsCounter\";\n\nfunction App() {\n    const dispatch = useAppDispatch();\n    const gameStarted = useAppSelector(selectGameStarted)\n    useEffect(() => {\n        dispatch(hidePopper());\n        if (!gameStarted) return;\n        const dice = determineStartingPlayer()\n        dispatch(setDiceRoll(dice));\n        if (dice[0] < dice[1]) dispatch(swapPlayers())\n    }, [dispatch, gameStarted]);\n    const jumpout = () => {\n        dispatch(handleClickOnField(activePlayer ? -1 : 24))\n    }\n    const activePlayer = useAppSelector(selectActivePlayer);\n\n    return (\n        <section style={center}>\n            <SwapPlayerPopper player={'test'}/>\n            <NameInput/>\n            <section style={{display: 'flex', justifyContent:'space-between'}}>\n            <CurrentPlayer />\n            <PointsCounter />\n            </section>\n            <section className={\"board\"}>\n                <section style={{display: \"inline-block\"}}>\n                    <Board\n                    />\n                </section>\n                <section className=\"side\" onClick={jumpout}>\n                    <RolledDice/>\n                </section>\n            </section>\n            <div style={{position:\"absolute\", bottom:0, fontSize: 6}}>Icons made by <a href=\"https://www.flaticon.com/authors/talha-dogar\" title=\"Talha Dogar\">Talha Dogar</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </section>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore, ThunkAction, Action} from '@reduxjs/toolkit';\nimport boardReducer from '../slicer/boardSlice'\nimport roundReducer from '../slicer/roundSlice'\n\n\nexport const store = configureStore({\n    reducer: {\n        chips: boardReducer,\n        round: roundReducer,\n    },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n    RootState,\n    unknown,\n    Action<string>>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}